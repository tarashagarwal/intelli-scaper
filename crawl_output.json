[
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\n![decisiontree](/_next/static/media/decisiontree.2829aade.svg)\n\n# Why Users Want Customer-Facing Analytics\n\n#### Due to low barriers to entry, abundant capital, and tens of thousands of\nambitious founders, the SaaS industry has become one of the most competitive\nmarkets in the world. As a result, customers’ expectations have risen\ndramatically.\n\nRead more\n\n#### Product\n\n#### October 1, 2024\n\n# Brief Overview of the Modern Data Stack\n\n#### Ok, but what actually is the Modern Data Stack?\n\nRead more\n\n#### Product\n\n#### September 26, 2024\n\n# The Evolution of Business Intelligence and the Emergence of Embedded BI\n\n#### For many SaaS product managers, business intelligence (BI) is a familiar\ntool that has shaped decision-making and product development for decades. But\nthe rise of embedded BI has introduced new possibilities and challenges,\nespecially in the fast-evolving SaaS ecosystem. In this article, we’ll explore\nthe history of traditional BI, its limitations, and how embedded BI emerged as\na product category in the 2000s.\n\nRead more\n\n#### Product\n\n#### July 26, 2024\n\n# Why the Modern Data Stack Doesn’t Replace Embedded Analytics\n\n#### While the modern data stack offers robust data capabilities, it also has\nlimitations.\n\nRead more\n\n#### Product\n\n#### July 23, 2024\n\n# Why Users Want Customer-Facing Analytics\n\n#### Due to low barriers to entry, abundant capital, and tens of thousands of\nambitious founders, the SaaS industry has become one of the most competitive\nmarkets in the world. As a result, customers’ expectations have risen\ndramatically.\n\nRead more\n\n#### Product\n\n#### July 19, 2024\n\n# Why SaaS Companies Offer Customer-Facing Analytics\n\n#### Just like the look & feel of analytics may differ, you’ll hear various\nexplanations for why a specific company wants to offer customer-facing\nanalytics\n\nRead more\n\n#### Product\n\n#### July 12, 2024\n\n# Don’t build ChatGPT for X. Focus on where ChatGPT doesn’t solve X\n\n#### A lot of AI products are essentially ChatGPT for X, but oftentimes\nChatGPT is not the ideal user experience for X. Instead of trying to make a\nbetter chatbot than OpenAI, focusing on solving X specifically will often lead\nto a very different UX (not a chat interface).\n\nRead more\n\n#### Product\n\n#### July 5, 2024\n\n# What is “customer-facing analytics”?\n\n#### “Customer-facing analytics” describes any data or insights feature in\nyour product that your end-users interact with. Customer-facing analytics are\nubiquitous across all kinds of software products, whether consumer, B2B,\nmarketplace, data app, or tech-enabled service. Some common examples of\ncustomer-facing analytics are charts & graphs, data tables, dashboards,\nreporting tools, or even self-service analytics.\n\nRead more\n\n",
    "url": "https://quill.co/blog"
  },
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\nJuly 26, 2024 · Product · 5 minute read\n\n# Why the Modern Data Stack Doesn’t Replace Embedded Analytics\n\n![rishi](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frishi.a87c0362.png&w=64&q=75)\n\nRishi Raman · Co-Founder at Quill\n\nThe modern data stack (MDS) refers to a collection of cloud-based tools and\ntechnologies that organizations use to manage, store, process, and analyze\ndata. It represents an evolution from traditional on-premises data systems to\na more scalable, flexible, and efficient approach enabled by the cloud. While\nthe modern data stack offers robust data capabilities, it also has\nlimitations.\n\n#### Technology adoption\n\n“The future is already here, it's just not evenly distributed.” ― William\nGibson\n\nYou’ve probably heard this quote before. It’s almost a platitude in silicon\nvalley, but it’s a good reminder that your reality is not necessarily shared\nby others. In major tech hubs, all we hear and talk about is the newest\ntrends, and are generally uninterested in the old. This is great for building\nnew innovative technologies, as it fosters a large dense market of early\nadopters. However, it’s important to remember that just because some\ntechnology is ubiquitous in San Francisco, it doesn’t mean that it is\nelsewhere in the country.\n\nLet’s take general cloud adoption as an example. AWS launched in 2006. Almost\ntwo decades later [a little more than half of enterprise IT environments are\nin the cloud](https://foundryco.com/tools-for-marketers/research-cloud-\ncomputing/) (vs. on prem), and only 13% of enterprises have a fully deployed\nmulti cloud infrastructure/architecture. Although cloud (and multi cloud)\nenvironments are clearly the future, it takes a long time for this trend to\n“distribute evenly”.\n\nNow, let’s look at the modern data stack, which consists of cloud-native data\ntools. Companies building products in the data stack have raised more than\n$220B in the last 4 years alone and the space has seen multiple decacorns\nreaching $500M ARR. Gartner estimates that data management is the largest\ninfrastructure market and by 2026, it’s expected to grow to $200B and\nrepresent 32% of the total infrastructure market.\n\nClearly a lot of companies are buying a lot of cloud data management products,\nand if you’re somewhere like San Francisco, cloud data products (or the modern\ndata stack) are considered industry standard by most. At this point, these\ntools may even be old news for some folks, as they start to look ahead to\nwhat’s next (e.g. [data mesh](https://www.datamesh-architecture.com/)).\nHowever this is not the reality that most others live in. It will take time to\ndistribute evenly. In the following sections we’ll get into the specific\nshortcomings of MDS and reasons why MDS doesn’t replace the need for embedded\nanalytics. Howevert, it’s important to remember that most companies cannot\nsolve their data needs with a modern data stack becasue they simply have not\nfully adopted it yet.\n\n#### Mismatch between user & tools\n\nThe evolution of the modern data stack (MDS) has generally made data\noperations easier, faster, and more reliable. For data practitioners and the\nbusiness as a whole, the modern data stack provides a ton of benefits. However\nfor the average employee not much has changed, they still don’t have access to\ndata infrastructure, if they did they are unlikely to know the data well\nenough to navigate it, and if they had the needed access and context they’d\nstill need to know sql (or python) – to be clear, the MDS is not just one\nthing, but nearly every component is designed with data professionals in mind,\nand would be very difficult for a non-technical business user to navigate.\n\nThere’s a new wave of BI tools built for non-technical users now, but 1)\nadoption is still very early and it’s not clear how good these tools are, and\n2) even if someone had clean controlled access to a tool like this, it still\nwould be at a disadvantage to native analytics in the product(s) they’re\nalready using. This leads to the next modern data stack shortcoming – users\ndon’t want to context switch, and generally don’t want to adopt new tools.\n\n#### A company may have fully adopted MDS tooling, but that doesn’t mean it\nwill actually be used widely in an organization.\n\nAlthough MDS has made centralizing data & BI much easier for companies, the\ndesire from users to access analytics in the tools they already use is\nunlikely to go anywhere. This is illustrated by the rise in popularity of\nreverse ETL tools, like [Hightouch](https://hightouch.com),\n[Census](https://census.com), and [Rudderstack](https://rudderstack.com),\nwhich sync data directly from a data warehouse to the operational systems used\nby your marketing, advertising, and operations teams (aka the SaaS apps they\nalready use).\n\nThe adoption of reverse ETL tools suggests that most businesses still need to\nmove data out of a centralized stack back out to the various tools that users\nactually use every day, since there’s a massive adoption advantage to having\nanalytics within your regular tools. Not only is there no need to switch\nbetween apps but the user is also able to see analytics along with operational\ncontext.\n\n#### Resource bottlenecks\n\nAnother issue your users or employees may face is dependence on internal data\nteams. The quality and availability of analytics depends heavily on the\ninternal data team's expertise and resources, which can vary significantly.\nData teams across industries have increased in headcount and efficiency (often\nthanks to adopting MDS). However, they’re still usually limited from both a\nresource and domain expertise perspective, which creates a bottleneck within\nmost enterprises.\n\nFrom a resource perspective, data teams have to deal with skill gaps and\ncompeting priorities. When data teams are the middleman between users and the\ndata stack, all requests go through them. Top-level executives may have higher\nleverage when it comes to getting analytics requests handled quickly by an\ninternal data team, but most users request’s will go to the bottom of the\nqueue. At worst it may never get turned around, and even if it does there\ncould be a delay of days to weeks, at which point the result may no longer be\nas useful or a decision has already been made.\n\nFrom a domain perspective, data teams only have so much context and expertise.\nData teams will usually have particularly good insight into their own\nbusiness, but this doesn’t necessarily mean they understand marketing\nanalytics or sales forecasting particularly well. They’ll never know the\nintricacies of how a specific organization (e.g. sales, HR, support, or\nproduct) works as well as the actual employees in that org or the vendors who\nserve that specific employee. The data team will also have a more shallow\nunderstanding of application specific data – they won’t know the details of\nhow this data was created, stored, and processed, before it was ingested by\nthem.\n\nEmbedded analytics does not face these bottlenecks. Analytics are always up-\nto-date (often real-time), and are maintained by the SaaS vendor who\nunderstands the entire lifecycle and lineage of this data. Additionally, the\nSaaS vendor has a deep understanding of their customers’ use-cases and best\npractices, plus they possess a wealth of data across their customer base. This\nallows them to aggregate and analyze data at scale, and to identify trends,\nbenchmarks, and patterns that individual customers might miss. This domain\nspecific knowledge and data enables them to provide targeted insights that\naddress industry-specific challenges or optimize domain-specific workflows.\n\n#### Summary\n\nUltimately, the popularity of the MDS is well founded and brings a number of\nbenefits to data practitioners and the businesses they serve; however, it\ndoesn’t exactly solve data access or analytics for the average user or\nemployee. This is because it doesn’t provide a comfortable or familiar UX for\nmost users, it doesn’t natively integrate data into a user’s existing\nworkflows and context, and the insights themselves may be limited by the data\nteam’s domain knowledge or expertise (or lack thereof).\n\nFor these reasons embedded analytics experiences that are carefully tailored\nto the end user will always have structural advantages. As a consequence,\nrather than replacing the need for embedded analytics, the MDS is actually\ncomplementary to and enhances embedded analytics.\n\nIf you’re a SaaS vendor considering embedded analytics, [book some time with\nQuill](https://cal.com/quillsql/30min). We’re happy to chat, learn more about\nyour business, and share best practices. If you’re already interested in\nembedded or customer-facing analytics and are evaluating solutions, take a\nlook at our [docs](https://docs.quillsql.com/portal/quickstart) or book an\nintro call with us [here](https://cal.com/quillsql/30min).\n\n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n#### Want to learn more?\n\n## [Book demo](https://cal.com/quillsql/30min)\n\n## [See docs](https://quill.co/docs)\n\n",
    "url": "https://quill.co/blog/why-mds-doesnt-replace-embedded-analytics"
  },
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\nJuly 12, 2024 · Product · 6 minute read\n\n![decisiontree](/_next/static/media/decisiontree.2829aade.svg)![decisiontree](/_next/static/media/decisiontree.2829aade.svg)\n\n# Don’t build ChatGPT for X. Focus on where ChatGPT doesn’t solve X\n\n![rishi](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frishi.a87c0362.png&w=64&q=75)\n\nRishi Raman · Co-Founder at Quill\n\nA lot of AI products are essentially ChatGPT for X, but oftentimes ChatGPT is\nnot the ideal user experience for X. Instead of trying to make a better\nchatbot than OpenAI, focusing on solving X specifically will often lead to a\nvery different UX (not a chat interface).\n\nFor example, we were initially excited by the promise of “Your AI Data\nAnalyst” and ”ChatGPT for Data Analytics” products that would enable non-\ntechnical business users to work with data. The demos were awesome, but we\nbecame frustrated that they only seemed to work with very selective inputs &\noutputs on unrealistically clean and small schemas. Real world schemas and\nbusiness use cases ultimately made these products unusable.\n\nWe decided to break down all user problems we experienced in order to avoid\nmaking the same mistakes:\n\nUser Problem| Product Mistake| Our Solution  \n---|---|---  \nCan’t see the exact query being run| Thinking that hiding SQL adds value,\nwithout considering that taking it away removes the ability to validate or\nmodify the query. This can lead to the user building incorrect dashboards that\nlook “close enough” without realizing ([compounding errors in\nLLMs](https://tomtunguz.com/compounding-error-llms/)).| Surface the exact\nquery in the UI  \nCan’t directly modify the query| Trying to achieve 100% accuracy. Without\nusing SQL query as ‘source of truth’ & without ability to modify it, the AI\n‘black box’ needs to be 100% accurate for users to trust it.| Allow the end\nuser to modify the query via simple filtering, sorting, pivoting UI  \nNo support for complex schemas| Trying to get LLM to understand raw database\nschema when naming is often not in business language.| We use our semantic\nlayer (cleaned customer-facing schema) which directly maps to business\nlanguage, instead of the raw database schema  \nNo support for self-hosting| Expecting customers to build/train your own model\nthat runs in container is too high friction.| We only send the AI the user’s\ntext prompt and the relevant semantic layer metadata. Our server SDK runs the\nquery in your cloud  \nSlow load time| Overly complex prompt and output because they assume the\ndesign pattern should mirror chatGPT. Assuming that the value of LLMs here is\nsimilar to other use cases (written explanation) to the end-user when it\nreally is just the query itself.| Generating a SQL query by itself is\nincredibly fast  \n  \n#### LLM generating an answer ≠ Properly traversing a decision tree\n\nWhen a human is doing any kind of work or solving a problem, they are moving\nalong a decision tree. For very simple tasks, the tree may just be one branch\nwith a single input and output — like a 19th century factory worker performing\nthe same task over and over again. As the complexity of the task increases,\nthe complexity of the decision tree also increases, and the value of the work\nto be done is directly related to the difficulty of traversing a decision tree\nwell. For a complex task, in order to discover a valid path, it may often\nrequire going down “wrong” paths, backtracking, and using that updated context\nto eventually find the right path. It’s usually too hard (if not impossible)\nto perfectly foresee everything that needs to be done and how to do it in a\nvacuum.\n\n#### One branch at a time\n\nThe best AI products don’t expect an LLM to solve an entire decision tree\nperfectly, they help the user solve each step down the tree. The LLM adds\nvalue by making each discrete step easier and faster, instead of pretending to\nunderstand complex technical things and AI-splaining them to you. We know AIs\nwill make mistakes, so let's design for that.\n\n#### What we built\n\n[Quill](https://quill.co/) is a fullstack SDK that SaaS companies use to add\nnative, customer-facing dashboards & reporting features to their product.\nWe’ve released a custom reporting component with AI query generation on top.\nCheck out our docs [here](https://quill.co/docs/bi-platform/quickstart). If\nyou’re curious to learn more you can book a demo\n[here](https://cal.com/quillsql/30min).\n\n    \n    \n    import { ReportBuilder } from \"@quillsql/react\" \n    \n    \n    \n    \n    <ReportBuilder \n    \n       aiEnabled={true} \n    \n       containerStyle={{ height: 600, width: \"100%\" }} \n    \n    />\n\n# Columns\n\nID\n\nAmount\n\nCreated At\n\nMerchant\n\nUser Name\n\nCategory\n\nMerchant ID\n\nTo pick up a draggable item, press the space bar. While dragging, use the\narrow keys to move the item. Press space again to drop the item in its new\nposition, or press escape to cancel.\n\nSelect columns\n\n# Filters\n\nAdd filter\n\n# Pivot\n\nAdd pivot\n\n# Sort\n\nAdd sort\n\n# Limit\n\nAdd limit\n\nAsk AINew report\n\nID\n\nAmount\n\nCreated At\n\nMerchant\n\nUser Name\n\nCategory\n\nMerchant ID\n\n3,560\n\n113.16\n\n26 Nov 2024\n\nShell\n\nJuan Villareal\n\nFuel\n\n1\n\n3,561\n\n49.81\n\n18 Oct 2024\n\nShell\n\nJames Newton\n\nFuel\n\n1\n\n3,563\n\n36.96\n\n11 May 2025\n\nShell\n\nLeslie Stephenson\n\nFuel\n\n1\n\n4,137\n\n120.46\n\n15 Aug 2024\n\nValero\n\nJuan Villareal\n\nFuel\n\n3\n\n3,430\n\n16.34\n\n19 Apr 2025\n\nExxon\n\nElizabeth Williamson\n\nFuel\n\n6\n\n3,564\n\n88.80\n\n20 Apr 2025\n\nChevron\n\nBenjamin Johannsen\n\nFuel\n\n5\n\n3,466\n\n97.09\n\n17 Apr 2025\n\nMcDonald's\n\nElizabeth Williamson\n\nFood\n\n2\n\n3,473\n\n46.87\n\n03 Dec 2024\n\nMcDonald's\n\nJames Newton\n\nFood\n\n2\n\n3,474\n\n36.08\n\n26 Nov 2024\n\nMcDonald's\n\nJuan Villareal\n\nFood\n\n2\n\n3,475\n\n53.75\n\n13 Sep 2024\n\nMcDonald's\n\nBenjamin Johannsen\n\nFood\n\n2\n\n3,480\n\n71.64\n\n31 Jul 2024\n\nMcDonald's\n\nJames Newton\n\nFood\n\n2\n\n3,490\n\n90.72\n\n21 Mar 2025\n\nMcDonald's\n\nLeslie Stephenson\n\nFood\n\n2\n\n3,512\n\n60.21\n\n03 Apr 2025\n\nMcDonald's\n\nBenjamin Johannsen\n\nFood\n\n2\n\n3,522\n\n59.81\n\n01 Jul 2024\n\nMcDonald's\n\nJames Newton\n\nFood\n\n2\n\n3,523\n\n51.19\n\n04 Jun 2025\n\nMcDonald's\n\nJuan Villareal\n\nFood\n\n2\n\n3,539\n\n94.36\n\n28 Oct 2024\n\nMcDonald's\n\nElizabeth Williamson\n\nFood\n\n2\n\n3,566\n\n43.11\n\n30 Aug 2024\n\nExxon\n\nElizabeth Williamson\n\nFuel\n\n6\n\n3,567\n\n31.04\n\n30 Jan 2025\n\nChevron\n\nBenjamin Johannsen\n\nFuel\n\n5\n\n3,445\n\n101.94\n\n13 Feb 2025\n\nShell\n\nJames Newton\n\nFuel\n\n1\n\n3,569\n\n115.82\n\n20 Apr 2025\n\nValero\n\nJames Newton\n\nFuel\n\n3\n\n1 of 301\n\n",
    "url": "https://quill.co/blog/dont-build-chatgpt-for-x"
  },
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\nJuly 23, 2024 · Product · 6 minute read\n\n# Why Users Want Customer-Facing Analytics\n\n![rishi](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frishi.a87c0362.png&w=64&q=75)\n\nRishi Raman · Co-Founder at Quill\n\nDue to low barriers to entry, abundant capital, and tens of thousands of\nambitious founders, the SaaS industry has become one of the most competitive\nmarkets in the world. As a result, customers’ expectations have risen\ndramatically. Access to data and insights is no exception. A trend that has\ngained significant traction is the demand for customer-facing analytics, also\nknown as embedded analytics. Users now expect that high-quality analytics\nfeatures are seamlessly integrated into their SaaS products/product\nexperience. Below, I outline the reasons users want customer-facing analytics.\n\n#### Users want analytics where they are\n\nUsers crave convenience. They want seamless access to analytics within their\nexisting workflows. Customer-facing analytics that are embedded within the\nplatform they already use for their day-to-day operations reduces the product\nfriction to almost zero. Data and insights are surfaced naturally as users\ntake action in the application or are at most a few clicks away. By providing\nusers with actionable insights without the need to switch platforms, customer-\nfacing or embedded analytics not only enhances user experience by eliminating\nthe need for users to navigate multiple tools but also ensures that users can\nmake informed decisions faster and more efficiently.\n\n#### SaaS vendor’s domain expertise leads to novel data insights\n\nUsers want easy wins. They want analytics that are relevant, accurate, &\nactionable; and SaaS vendors are best positioned to deliver on this. SaaS\nvendors have unique advantages when providing analytics: 1) they deeply\nunderstand their use cases, users, and best practices; and 2) they possess a\nwealth of data across their customer base, allowing them to aggregate and\nanalyze data at scale, identifying trends, benchmarks, and patterns that\nindividual customers might miss. This domain specific knowledge and data\nenables them to provide targeted insights that address industry-specific\nchallenges or optimize domain-specific workflows. Overall this expertise gives\nSaaS vendors the opportunity to provide the highest-leverage analytics that\nare perfectly tailored to their customers' needs.\n\n#### Optimal UI/UX for end-users\n\nUsers want products that are familiar and easy to use. When embedded or\ncustomer-facing analytics are well-designed, users can interact with data in a\nway that feels natural within the context of the application, leading to\nhigher engagement and satisfaction. Just as SaaS vendors leverage their\nunderstanding of users, use cases, and best practices to surface the most\nvaluable insights, they also have a significant advantage in providing the\nideal UI/UX. By tailoring the user interface and experience to the specific\nneeds of their users, SaaS vendors can ensure that analytics features are\nintuitive and accessible. This is especially important considering that most\nusers are data scientists or analysts. While data professionals may prefer\nadvanced analytics or BI applications, these tools are often not suitable for\nevery user. Many important stakeholders—such as executives, managers, and\nbusiness leaders— are non-technical business users that need insights to make\nstrategic decisions but lack the expertise to navigate complex data platforms.\nEmbedded analytics can provide the optimal UI/UX by offering familiar design\npatterns and aligning with users' natural workflows.\n\n#### Summary\n\nAs businesses increasingly rely on data to drive decisions, the demand for\ncustomer-facing analytics within SaaS products will continue to grow. When\ndesigned well, the vast majority of users will prefer customer-facing or\nembedded analytics offered within their SaaS product over specialized\nanalytics tool due the the natural advantages SaaS vendors have: they can\noffer unparalleled convenience, leverage their deep understanding of user\nneeds, and deliver an optimal user experience. In a competitive market,\noffering embedded analytics can be a key differentiator that drives success\nfor both you and your customers.\n\n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n#### Want to learn more?\n\n## [Book demo](https://cal.com/quillsql/30min)\n\n## [See docs](https://quill.co/docs)\n\n",
    "url": "https://quill.co/blog/why-users-want-customer-facing-analytics"
  },
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\nJuly 19, 2024 · Product · 4 minute read\n\n# Why SaaS Companies Offer Customer-Facing Analytics\n\n![rishi](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frishi.a87c0362.png&w=64&q=75)\n\nRishi Raman · Co-Founder at Quill\n\nJust like the look & feel of analytics may differ, you’ll hear various\nexplanations for why a specific company wants to offer customer-facing\nanalytics:\n\n> “Customers are asking for it”\n\n“We need it to compete up-market”\n\n“The CFO holds budget for the renewal, and we need her to understand the value\nwe provide, since she’s not a daily user of our product”\n\n“Managers want observability into how their team is using the product”\n\nBut in the same way analytics features boil down to the same primitives\n(charts, tables, dashboards, etc), the ultimate reason for offering customer-\nfacing analytics almost always comes down to the same core goal: product usage\nand revenue. Embedded or customer-facing analytics are a tried and true way of\ndoing this – nearly every successful SaaS company integrates these features\ninto their products. Below I outline and explain exactly why SaaS companies\ninvest in customer-facing or embedded analytics.\n\n#### Analytics = engagement = retention = revenue\n\nAnalytics features create virtuous loops for software products: analytics\nfeatures enhance user experience, which drives more engagement & usage, which\ncreates more data, which drives more analytics usage. Let’s take Stripe as an\nexample. Stripe has various customer-facing analytics features: transaction\nanalytics, subscription metrics, financial reporting & insights, risk & fraud\nanalytics, API usage & performance metrics – nearly every product/product line\nhas a corresponding analytics product/feature. These features give users a\nclear picture of how Stripe is functioning and allow them to measure the\nresults of their actions. This not only improves user experience but also\nbuilds trust. As users see the tangible benefits of their actions, they become\nmore engaged, leading to increased product stickiness. This engagement drives\nfurther usage of Stripe’s core products and promotes the adoption of adjacent\nproducts. As product usage grows, so does the volume of data managed by\nStripe, making its embedded analytics features even more useful and valuable.\n\n#### Product expansion\n\nAnalytics features don't just drive engagement for core users; they also\nattract adjacent user types. SaaS products like Salesforce and Jira are great\nexamples of this, as they want to capture the attention of an entire\ndepartment or function. Salesforce wants the entire sales organization, from\nindividual reps to the CRO on their platform. Jira wants to engage the entire\nengineering and product organization, everyone from IC engineers to the CTO.\nAs you move up the org structure, usage is driven more and more by analytics\nfeatures (rather than the core product features). Sales managers are rarely\nadding leads or creating accounts themselves, but they do want to see\npipeline, conversions, and review opportunities created by their team.\nLikewise, the CTO is generally not creating actual tickets in Jira or even\ntaking action on them, but he does want to understand engineering velocity\nacross teams or where there are bottlenecks in engineering. As you attract\nmore user-types and serve more stakeholders across an organization, you become\na platform or system-of-record for the organization. Accordingly, embedded\nanalytics is a powerful lever that SaaS companies use to help them transition\nfrom a niche application to a system of record (SOR) – the holy grail for\nsoftware companies.\n\n#### Product differentiation\n\nAs businesses increasingly rely on data to drive decisions, the demand for\ncustomer-facing analytics within SaaS products will continue to grow, and\ncompanies that can provide actionable insights and valuable data within their\nplatforms are more likely to attract and retain customers. Accordingly,\ncustomer-facing analytics are more than just a feature; they are a strategic\ntool that drives user engagement, expands product usage across different user\ntypes, and ultimately boosts revenue. By embedding analytics, SaaS companies\nnot only enhance their value proposition but also secure a competitive edge in\nthe market.\n\n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n#### Want to learn more?\n\n## [Book demo](https://cal.com/quillsql/30min)\n\n## [See docs](https://quill.co/docs)\n\n",
    "url": "https://quill.co/blog/why-offer-customer-facing-analytics"
  },
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\n\\\\\\\n\nOctober 1, 2024 · Product · 6 minute read\n\n# Brief Overview of the Modern Data Stack\n\n![rishi](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frishi.a87c0362.png&w=64&q=75)\n\nRishi Raman · Co-Founder at Quill\n\nThe modern data stack (MDS) refers to a collection of cloud-based tools and\ntechnologies that organizations use to manage, store, process, and analyze\ndata. It represents an evolution from traditional on-premises data systems to\na more scalable, flexible, and efficient approach enabled by the cloud.\n\nThe MDS typically includes several key components, however, not all companies\nuse or need all components. Accordingly, the components below are organized\ninto two sections:\n\n#### Basic stack\n\nThe basic stack includes the necessary core components of any modern data\nstack. The basic stack is designed to meet the fundamental needs of businesses\nthat are starting to leverage data for decision-making and operational\nefficiency. Typically, these are small to mid-sized companies or startups that\nneed to establish a reliable data infrastructure without overcomplicating\ntheir operations. The primary use case is to ensure that data is efficiently\ningested, stored, and made available for analysis and reporting. This stack\nfocuses on three core components:\n\nComponent| Tools| Purpose  \n---|---|---  \nData Ingestion and ETL (Extract, Transform, Load)| Fivetran, Stitch, Airbyte,\nApache NiFi.| To extract data from various sources, transform it as needed,\nand load it into a data warehouse  \nData Warehousing| Snowflake, Google BigQuery, Amazon Redshift, Azure Synapse|\nTo store large volumes of data in a structured format that supports efficient\nquerying and analysis  \nBusiness Intelligence and Analytics| Looker, Tableau, Power BI, Metabase| To\nanalyze data and create visualizations, dashboards, and reports for business\ninsights  \n  \n#### Advanced stack\n\nThe advanced stack describes additional components that support more complex\nand sophisticated data needs. Components in this stack are suitable for larger\nenterprises or businesses with extensive data requirements, such as real-time\nprocessing, advanced analytics, and machine learning capabilities. Key\ncomponents include:\n\nComponent| Tools| Purpose  \n---|---|---  \nData Orchestration and Workflow Management| Apache Airflow, Prefect, Dagster|\nTo automate and manage data workflows and pipelines. As ETL workloads increase\n(in terms of number of jobs, transformation complexity, and/or data volume),\norganizations need a way to manage and monitor these.  \nData Transformation & Semantic layer| dbt (data build tool), Matillion, Cube|\nTo clean, transform, and prepare data for analysis and reporting. The ETL\ntools listed in the basic stack generally load data in a predetermined,\nusually multi-table structure (normalized data). Semantic layer and\nTransformation tools help companies transform normalized data into a custom\nschema (denormalized data) that makes the most sense for their business and\nuse-case(s).  \nData Governance and Cataloging| Alation, Collibra, DataHub| To manage data\nquality, ensure compliance, and provide data discovery, lineage, and\ncataloging capabilities. These tools are relevant for enterprises that are\nmanaging large volumes of data across multiple organizations and/or companies\noperating in regulated environments (GDPR, HIPAA, or CCPA, etc.) and want to\nuse a data governance tool to help comply with regulations.  \nData Storage| AWS S3, Google Cloud Storage, Azure Blob Storage| To store raw\nand processed data in a cost-effective and scalable manner. For companies\nmanaging very large data volumes, they may want to also use a cheaper object\nstorage option for some use-cases (vs. DWH, which will have much higher\nstorage costs).  \nMachine Learning and Data Science| Databricks, DataRobot, SageMaker| To build,\ntrain, and deploy machine learning models and perform advanced data science\ntasks.  \n  \n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n#### Want to learn more?\n\n## [Book demo](https://cal.com/quillsql/30min)\n\n## [See docs](https://quill.co/docs)\n\n",
    "url": "https://quill.co/blog/brief-overview-of-the-modern-data-stack"
  },
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\nJuly 5, 2024 · Product · 6 minute read\n\n# What is “customer-facing analytics”?\n\n![rishi](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frishi.a87c0362.png&w=64&q=75)\n\nRishi Raman · Co-Founder at Quill\n\n\"Customer-facing analytics\" describes any data or insights feature in your\nproduct that your end-users interact with. Customer-facing analytics are\nubiquitous across all kinds of software products, whether consumer, B2B,\nmarketplace, data app, or tech-enabled service. Some common examples of\ncustomer-facing analytics are charts & graphs, data tables, dashboards,\nreporting tools, or even self-service analytics.\n\n#### What’s the difference between \"customer-facing\", \"user-facing\", and\n\"embedded\" analytics?\n\n\"User-facing analytics\" and \"embedded analytics\" are generally used\ninterchangeably with the term \"customer-facing analytics\". However, data folks\nthat really care about this stuff will tell you that embedded analytics is a\nspecific variation of customer or user facing analytics that’s defined by,\n\"bringing data into familiar places to meet customers where they live, and\nencouraging curiosity with data that they would normally not be able or have\ntime to interpret.\" Overall the descriptors \"customer-facing,\" \"user-facing,\"\nor \"embedded\" primarily distinguish analytics delivered as a product (or part\nof a product) to end-users or customers from internal or business-facing\nanalytics, where analytics are delivered via a 3rd party application to\ninternal stakeholders within a company. Companies almost exclusively use\nbusiness intelligence (BI), data science notebook, or data app tools – such as\nPowerBI, Looker, Tableau, Hex, or Streamlit – for internal use-cases.\n\n#### Customer-facing, user-facing, and embedded analytics ≠ product analytics\n\nCustomer-facing, user-facing, or embedded analytics should not be confused\nwith product analytics (or sometimes called event analytics). Product\nanalytics tools, like Amplitude, Mixpanel, or Posthog, may require\nimplementing some frontend code, but this is invisible to end-users/customers,\nand the data/insights are used by internal company stakeholders. Specifically,\nproduct analytics tools enable product teams to ingest, process, and analyze\nuser event and engagement data (e.g. conversion metrics, feature usage, active\nuser count). Typically product teams use this data to improve and optimize\ntheir product experience.\n\n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n#### Want to learn more?\n\n## [Book demo](https://cal.com/quillsql/30min)\n\n## [See docs](https://quill.co/docs)\n\n",
    "url": "https://quill.co/blog/what-is-customer-facing-analytics"
  },
  {
    "title": "Fullstack API Platform for Dashboards and Reporting",
    "type": "blog",
    "content": "[![Quill](/_next/static/media/quill.7847c2f3.svg)Blog](/blog)\n\n# [Product](https://quill.co)# [Docs](https://quill.co/docs)#\n[Jobs](https://www.ycombinator.com/companies/quill/jobs/)\n\n[See Quill](https://cal.com/quillsql/30min)\n\n\\\\\\\n\nSeptember 26, 2024 · Product · 6 minute read\n\n# The Evolution of Business Intelligence and the Emergence of Embedded BI\n\n![rishi](/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frishi.a87c0362.png&w=64&q=75)\n\nRishi Raman · Co-Founder at Quill\n\nFor many SaaS product managers, business intelligence (BI) is a familiar tool\nthat has shaped decision-making and product development for decades. But the\nrise of embedded BI has introduced new possibilities and challenges,\nespecially in the fast-evolving SaaS ecosystem. In this article, we’ll explore\nthe history of traditional BI, its limitations, and how embedded BI emerged as\na product category in the 2000s.\n\n#### The Birth of BI\n\nBI, in its earliest form, was closely tied to the rise of computers and goes\nall the way back to the 60’s and 70’s. As companies like IBM began developing\nlarge-scale computing systems, businesses saw opportunities to leverage these\ntechnologies for more advanced data processing and decision-making. Key\nFeatures: Early BI systems were designed to collect, store, and analyze vast\namounts of data, mostly in the form of simple reports. Target Users: These\nsystems were primarily used by large enterprises with the resources to afford\nthese high-powered machines. Limitations: These early systems were slow,\ncentralized, and highly technical, requiring specialized knowledge to operate.\nBy the 1970s, relational databases like those developed by Oracle were\ntransforming how companies stored and retrieved data, making it easier to\ngenerate reports and gain insights. But these systems were still centralized\nand geared toward internal use, with little focus on customer-facing\nanalytics.\n\n#### The BI Boom\n\nIn the 1990s, BI truly exploded, as more companies sought to create\ncompetitive advantages using data. In fact, by the mid-90s, Gartner was\nalready identifying BI as one of the fastest-growing sectors in software\ndevelopment. Several factors contributed to the rapid growth of BI during this\nperiod: Technological Advancements: The rise of personal computers and\nadvancements in data storage enabled companies to store and analyze more data\nat scale. Enterprise Adoption: Companies increasingly saw BI as a must-have\ntool to stay competitive, with key players like IBM, SAP, and Oracle leading\nthe market. Rise of Reporting Tools: Standalone reporting tools became widely\navailable, and businesses could more easily generate insights from their data.\nThe BI tools that came from this era resemble the BI tools we see today.\nHowever these older BI solutions were still complex, siloed, and often\nrequired dedicated teams of data experts to operate. Modern BI and the\nEmergence of Embedded Use-cases BI Meets SaaS The 2000s marked a seismic shift\nin how businesses consumed software, with the advent of SaaS platforms\nrevolutionizing the way applications were built and delivered. SaaS Explosion:\nSaaS enabled companies to deliver software through the cloud, making it\naccessible on-demand and from anywhere. This created an explosion in the\ndevelopment of customer-facing applications. Data Explosion: With SaaS\napplications came a flood of user data — and product managers wanted to\nleverage that data not just for internal reporting, but as a feature within\ntheir products. Suddenly, analytics went from an exclusively separate category\nto a set of features that could be offered within SaaS platforms themselves,\nand as a result, could be leveraged as a competitive advantage over other\nsimilar tools. This ushered in the era of embedded BI.\n\n#### The Shift to Embedded Use Cases\n\nWhat sets embedded BI apart is that it is about integrating analytics into the\nexisting workflows and user experience of a product, instead of generating\ninsights for internal use. Some common embedded use cases included:\n\n**In-Product Dashboards** Providing users with live dashboards within the\napplication to track key metrics.\n\n**Custom Reporting** Allowing users to generate and manipulate reports on\ntheir own data within the product.\n\n**Real-Time Analytics** Displaying live, updated information relevant to the\nuser’s workflow or goals. Yet, despite this growing trend, there was a\nproblem: most BI tools at the time were not designed for this purpose. As a\nresult embedded BI experiences were unsightly, slow, and difficult to\nintegrate into modern SaaS platforms.\n\n#### Embedded BI as an Afterthought a Hack\n\nUltimately traditional embedded BI is essentially a product hack. All embedded\nofferings come from internal BI companies, and their products were designed\nfor standalone, internal reporting. These products were then retrofitted for\nembedded use cases. As a result, the embedded BI solutions we see today bring\nwith them a number of limitations which force developers and product teams to\nmake significant compromises on their end product experience.\n\n#### Key Challenges with Legacy Embedded BI\n\n**Disjointed Integration** Traditional BI tools weren’t built with embedding\nin mind. Most solutions rely on iframe-based integrations, which create a\nfragmented user experience where the embedded analytics feel separate from the\ncore SaaS product. Even when companies promote JavaScript-based\nimplementations, they often fail to offer the true benefits of native\ncomponents, leaving the user experience disjointed.\n\n**Containerization for Sensitive Data** Modern SaaS platforms often need to\nmaintain sensitive data within the customer’s own cloud environment. However,\nbecause most embedded offerings started as standalone BI tools, maintaining\ndata within a customer’s cloud requires high-maintenance containerized\nenvironments. Many traditional BI systems struggle to support containerized\nenvironments, making it difficult to meet security and compliance\nrequirements.\n\n**Data is now a Product** BI tools were built with data practitioners, who\nunderstood their entire data pipeline and had the patience to wait for\nresults. If queries were slow or data wasn’t real-time, it wasn’t seen as a\nsignificant issue, as these users could navigate around these limitations.\nHowever, in customer-facing use cases, the expectations are entirely\ndifferent. Analytics are part of the product itself, and the users consuming\nthis data are your customers. They expect real-time insights to inform their\ndecisions on the spot, whether it's monitoring KPIs, tracking performance\nmetrics, or making data-driven decisions. Slow or out-of-date data disrupts\ntheir experience and reduces the perceived value of your product.\n\n**Limited Customization** Traditional BI tools are often rigid, with limited\nability to customize dashboards and reports. This makes it hard to tailor\nanalytics to the unique needs of different user segments, leading to a “one-\nsize-fits-all” approach that doesn’t meet modern user expectations.\n\n**High Maintenance** Integrating these legacy systems requires ongoing\ntechnical resources to manage data sources, ensure compatibility, and address\nmaintenance issues. This constant upkeep can slow down product development and\ncreate inefficiencies.\n\n#### The Embedded BI Challenge: Modern Needs, Old Foundations\n\nThe challenges detailed above are why embedded BI often looks and behaves\ndifferently from the core SaaS applications they’ve been wedged into. Business\nintelligence has come a long way since its early days in the 60s and 70s,\ntransforming from slow, internal reporting systems to more dynamic, embedded\nanalytics tools that power SaaS products today. But while BI is now a very\nmature category that has gone through many evolutions, embedded BI is not, and\nit’s important to recognize that today’s embedded BI solutions still carry the\nlimitations of their traditional BI origins.\n\nIn part 2 of this post, we’ll explore what first-principles embedded BI could\nlook like — and how product managers can get ahead of the curve by using\nsolutions that are specifically designed for customer-facing analytics within\nSaaS platforms.\n\n![gradient](/_next/static/media/gradient.f3499069.svg)\n\n#### Want to learn more?\n\n## [Book demo](https://cal.com/quillsql/30min)\n\n## [See docs](https://quill.co/docs)\n\n",
    "url": "https://quill.co/blog/the-evolution-of-business-intelligence-part-1"
  }
]